# -*- coding: utf-8 -*-
"""image_classifier.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1u73Ydx8u-ZvLJ-aFABpdAyrVv7vKL3cZ
"""

'*********************************************************************************************************************'

# Image Classification with TensorFlow and tf_flowers Dataset

import tensorflow as tf
import tensorflow_datasets as tfds
import matplotlib.pyplot as plt

# Load dataset
dataset, info = tfds.load('tf_flowers', with_info=True, as_supervised=True)
train_ds = dataset['train']

# Preview
print(info)

# Display sample images
for image, label in train_ds.take(6):
    plt.figure()
    plt.imshow(image)
    plt.title(f'Label: {label.numpy()}')
    plt.axis('off')
    plt.show()


'*********************************************************************************************************************'

# Preprocess the dataset

import tensorflow as tf
import tensorflow_datasets as tfds

IMG_SIZE = (180, 180)

# Load dataset
train_ds = tfds.load('tf_flowers', split='train', as_supervised=True)

# Preprocessing function
def preprocess(image, label):
    image = tf.image.resize(image, IMG_SIZE)
    image = image / 255.0
    return image, label

# Apply preprocessing
train_ds = train_ds.map(preprocess).batch(32).prefetch(buffer_size=tf.data.AUTOTUNE)
train_ds


'*********************************************************************************************************************'
# Build and train a model using MobileNetV2

import tensorflow as tf
import tensorflow_datasets as tfds
import matplotlib.pyplot as plt

IMG_SIZE = (224, 224)
BATCH_SIZE = 32

def preprocess(image, label):
    image = tf.image.resize(image, IMG_SIZE)
    image = image / 255.0
    return image, label

train_ds = tfds.load('tf_flowers', split='train[:85%]', as_supervised=True)
val_ds = tfds.load('tf_flowers', split='train[85%:]', as_supervised=True)

train_ds = train_ds.map(preprocess).shuffle(1000).batch(BATCH_SIZE).prefetch(tf.data.AUTOTUNE)
val_ds = val_ds.map(preprocess).batch(BATCH_SIZE).prefetch(tf.data.AUTOTUNE)

base_model = tf.keras.applications.MobileNetV2(
    input_shape=IMG_SIZE + (3,),
    include_top=False,
    weights='imagenet'
)
base_model.trainable = False  # freeze base model

model = tf.keras.Sequential([
    base_model,
    tf.keras.layers.GlobalAveragePooling2D(),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dense(5, activation='softmax')
])

model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

history = model.fit(train_ds, validation_data=val_ds, epochs=5)

plt.plot(history.history['accuracy'], label='Train Acc')
plt.plot(history.history['val_accuracy'], label='Val Acc')
plt.title('Accuracy Over Epochs')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()
plt.grid(True)
plt.show()

model.save('flower_model_mobilenetv2.keras')


'*********************************************************************************************************************'
# Image Classification with the Trained Model
# Upload an image to classify

from google.colab import files
from PIL import Image
import numpy as np

uploaded = files.upload()

for fn in uploaded.keys():
    img = Image.open(fn).convert("RGB")
    img = img.resize((224, 224))
    img_array = np.array(img) / 255.0
    img_batch = np.expand_dims(img_array, axis=0)

import tensorflow as tf

# Load your trained model
model = tf.keras.models.load_model('flower_model_mobilenetv2.keras')

# Flower class names from tf_flowers
CLASS_NAMES = ['daisy', 'dandelion', 'roses', 'sunflowers', 'tulips']

# Predict
prediction = model.predict(img_batch)[0]
pred_index = np.argmax(prediction)
pred_label = CLASS_NAMES[pred_index]
confidence = prediction[pred_index]

print(f"ðŸŒ¼ Prediction: {pred_label.capitalize()} ({confidence:.2%} confidence)")


'*********************************************************************************************************************'
# Evaluate the model with a confusion matrix

import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
# Recreate your val_ds without shuffling
val_ds = tfds.load('tf_flowers', split='train[85%:]', as_supervised=True)
val_ds = val_ds.map(preprocess).batch(32)

true_labels = []
pred_labels = []

for images, labels in val_ds:
    preds = model.predict(images)
    true_labels.extend(labels.numpy())
    pred_labels.extend(np.argmax(preds, axis=1))

CLASS_NAMES = ['daisy', 'dandelion', 'roses', 'sunflowers', 'tulips']

cm = confusion_matrix(true_labels, pred_labels)
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=CLASS_NAMES)

plt.figure(figsize=(8, 6))
disp.plot(cmap='Blues', xticks_rotation=45)
plt.title("ðŸŒ¸ Flower Classifier - Confusion Matrix")
plt.grid(False)
plt.show()